@using Camunda.Http.Api.Model
@using Camunda.Http.Api


@if (_identityLinks != null)
{
    <MudText>Assignee: <RuntimeIdentityLinkItem Items="@ProcessAssignees(_identityLinks)"/></MudText>
    <MudText>Candidate Users: <RuntimeIdentityLinkItem Items="@ProcessCandidateUsers(_identityLinks)"/></MudText>
    <MudText>Candidate Groups: <RuntimeIdentityLinkItem Items="@ProcessCandidateGroups(_identityLinks)"/></MudText>
    <MudText>Owner: <RuntimeIdentityLinkItem Items="@ProcessOwners(_identityLinks)"/></MudText>
}
else
{
    <MudText>Loading Identity Links...</MudText>
}



@code {

    [Parameter]
    public CamundaClient Camunda { get; set; }

    [Parameter]
    public string UserTaskId { get; set; }

    private List<IdentityLinkDto> _identityLinks;

    protected override async Task OnInitializedAsync()
    {
        if (UserTaskId == null)
        {
            throw new Exception("A UserTaskId must be provided for User Task Identity links component");
        }
        _identityLinks = await GetUserTaskIdentityLinks(UserTaskId);
    }

    private async Task<List<IdentityLinkDto>> GetUserTaskIdentityLinks(string userTaskId)
    {
        return await Camunda.Api.TaskIdentityLinkApi.GetIdentityLinksAsync(userTaskId);
    }

    private IEnumerable<string> ProcessAssignees(List<IdentityLinkDto> identityLinks)
    {
        return identityLinks.FindAll(i => i.Type == "assignee").Select(i => i.UserId).AsEnumerable();
    }

    private IEnumerable<string> ProcessCandidateUsers(List<IdentityLinkDto> identityLinks)
    {
        return identityLinks.FindAll(i => i.Type == "candidate" && i.UserId != null).Select(i => i.UserId).AsEnumerable();
    }

    private IEnumerable<string> ProcessCandidateGroups(List<IdentityLinkDto> identityLinks)
    {
        return identityLinks.FindAll(i => i.Type == "candidate" && i.GroupId != null).Select(i => i.GroupId).AsEnumerable();
    }

    private IEnumerable<string> ProcessOwners(List<IdentityLinkDto> identityLinks)
    {
        return identityLinks.FindAll(i => i.Type == "owner" && i.UserId != null).Select(i => i.UserId).AsEnumerable();
    }

}