@using Camunda.Http.Api
@using Camunda.Http.Api.Client
@using System.IO

@inject AppData AppData
@inject ISnackbar Snackbar

<MudCard Outlined="true" Elevation="0">
    <MudCardContent>
        <MudForm @ref="@_form" @bind-isValid="@_isValidForm">

            <MudGrid>
                <MudItem xs="12">
                    <MudTextField Label="Deployment Name" Variant="Variant.Text" @bind-Value="@_deploymentNameForDeployment" Required="true" Margin="Margin.Normal"/>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Label="Deployment Source" Variant="Variant.Text" @bind-Value="@_deploymentSource" Margin="Margin.Normal"/>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Label="Tenant Id" Variant="Variant.Text" @bind-Value="@_tenantIdForDeployment" Margin="Margin.Normal"/>
                </MudItem>
                <MudItem xs="12">
                    <MudCheckBox @bind-Checked="_duplicateFilteringForDeployment" Color="Color.Primary" Label="Duplicate Filtering"/>
                </MudItem>
                <MudItem xs="12">
                    <MudCheckBox @bind-Checked="_deployChangedOnlyForDeployment" Color="Color.Primary" Label="Deploy Changed Only"/>
                </MudItem>

                <MudItem xs="12">
                    <InputFile id="fileInput" OnChange="UploadFiles" hidden multiple/>

                    <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" Class="my-3" StartIcon="@Icons.Filled.AttachFile" for="fileInput">
                        Add Files to Deployment
                    </MudButton>
                </MudItem>
                @if (_files.Any())
                {
                    <MudItem xs="12">
                        <MudText Typo="@Typo.h6" Class="" GutterBottom="true">@_files.Count() File@(_files.Count() == 1 ? "" : "s"):</MudText>

                        <MudList Class="my-3">
                            @foreach (var file in _files)
                            {
                                <MudListItem Icon="@Icons.Filled.AttachFile" @key="@file">
                                    @file.Name <code>@file.Size bytes</code>
                                </MudListItem>
                            }
                        </MudList>

                        <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary"
                                   StartIcon="@Icons.Filled.Clear"
                                   OnClick="@_files.Clear"
                                   Disabled="@(_files.Any() == false)">
                            Clear Files
                        </MudButton>
                    </MudItem>
                }
            </MudGrid>
        </MudForm>
    </MudCardContent>
    <MudCardActions>
        <MudButton HtmlTag="label"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Filled.CloudUpload"
                   OnClick="@DeployFiles"
                   Class="ml-auto"
                   Disabled="@(_files.Any() == false || _isValidForm != true)">
            Deploy
        </MudButton>
    </MudCardActions>
</MudCard>


@code {

    [Parameter]
    public CamundaClient Camunda { get; set; }

    string _deploymentNameForDeployment = "My Deployment";
    string _deploymentSource;
    string _tenantIdForDeployment;
    bool _duplicateFilteringForDeployment;
    bool _deployChangedOnlyForDeployment;
    bool _isLoadingFiles;

    private int _maxFileSize = 1024 * 1024 * 15;
    private int _maxAllowedFiles = 10;

    MudForm _form;
    bool _isValidForm;

    IList<IBrowserFile> _files = new List<IBrowserFile>();

    protected override void OnAfterRender(bool firstRender)
    {
        _form.Validate(); // This is required in order for the Deploy button to enable with the default form values and the user adding a files.
    }

    void UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            if (file.Size >= _maxFileSize)
            {
                AppData.SnackWarning(Snackbar, $"File {file.Name} is too large.  Max file size: {_maxFileSize}.");
            }

            if (_files.Count >= _maxAllowedFiles)
            {
                AppData.SnackWarning(Snackbar,$"Cannot upload more than {_maxAllowedFiles} files.");
            }

            _files.Add(file);
        }
    }

    async void DeployFiles()
    {
        if (_files.Any())
        {
            try
            {
                var deploymentApi = AppData.CamundaClient.Api.DeploymentApi;

                var fileStreams = new List<Stream>();

                foreach (var browserFile in _files)
                {
                    var buffer = await GetBytes(browserFile);
                    fileStreams.Add(new FileMemoryStream(
                        buffer: buffer,
                        fileName: browserFile.Name,
                        contentName: browserFile.Name
                        ));
                }

                var deploymentResult = await deploymentApi.CreateDeploymentAsync(
                    tenantId: _tenantIdForDeployment,
                    deploymentSource: _deploymentSource,
                    deployChangedOnly: _deployChangedOnlyForDeployment,
                    enableDuplicateFiltering: _duplicateFilteringForDeployment,
                    deploymentName: _deploymentNameForDeployment,
                    data: fileStreams);

                AppData.SnackSuccess(Snackbar,$"Deployment Successful: {deploymentResult.Id}");
            }
            catch (Exception ex)
            {
                AppData.SnackError(Snackbar,$"Deployment Failed: {ex.Message}", ex);
            }
        }
        else
        {
            AppData.SnackWarning(Snackbar,"No files to upload!");
        }
    }

    static async Task<byte[]> GetBytes(IBrowserFile file)
    {
        await using var memoryStream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(memoryStream);
        return memoryStream.ToArray();
    }

}