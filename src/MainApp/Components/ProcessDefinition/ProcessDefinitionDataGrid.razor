@using Camunda.Http.Api.Model
@using Camunda.Http.Api

@inject AppData AppData

<DataGrid TItem="ProcessDefinitionDto"
          Data="@definitions"
          ReadData="@OnReadData"
          @bind-SelectedRow="@selectedSubDefinition"
          DetailRowTrigger="@((item)=>item.Id == selectedSubDefinition?.Id)"
          ShowPager="true"
          TotalItems="@totalDefinitions"
          PageSize="@pageSize"
          Sortable="false">
    <EmptyTemplate>
        <div class="box">
            No process definitions found!
        </div>
    </EmptyTemplate>

    <LoadingTemplate>
        <div class="box">
            Loading...
        </div>
    </LoadingTemplate>

    <ChildContent>
        <DataGridCommandColumn TItem="ProcessDefinitionDto" Caption="Commands" />
        <DataGridColumn TItem="ProcessDefinitionDto" Field="@nameof(ProcessDefinitionDto.Key)" Caption="Key" />
        <DataGridColumn TItem="ProcessDefinitionDto" Field="@nameof(ProcessDefinitionDto.Name)" Caption="Name" />
        <DataGridColumn TItem="ProcessDefinitionDto" Field="@nameof(ProcessDefinitionDto.TenantId)" Caption="Tenant" />
        <DataGridColumn TItem="ProcessDefinitionDto" Field="@nameof(ProcessDefinitionDto.Resource)" Caption="Resource" />
        <DataGridColumn TItem="ProcessDefinitionDto" Field="@nameof(ProcessDefinitionDto.Version)" Caption="Latest Version" />
    </ChildContent>

    <DetailRowTemplate>
        <Card Margin="Margin.Is4.OnY">
            <CardHeader>
                <CardTitle>Definition <i>@context.Key</i> Versions</CardTitle>
            </CardHeader>
            <CardBody>
                <DataGrid TItem="ProcessDefinitionDto"
                          Data="@subDefinitions"
                          ReadData="@SubDefinitionsOnReadData" 
                          ShowPager="true" 
                          TotalItems="@totalSubDefinitions" 
                          PageSize="@SubDefinitionsPageSize" 
                          Sortable="false">
                    <ChildContent>
                        <DataGridColumn TItem="ProcessDefinitionDto" Field="@nameof(ProcessDefinitionDto.Suspended)">
                            <DisplayTemplate Context="stateContext">
                                @if (stateContext.Suspended == false)
                                {
                                    <Badge Color="Color.Success">Active</Badge>
                                }
                                else
                                {
                                    <Badge Color="Color.Secondary">Suspended</Badge>
                                }
                            </DisplayTemplate>
                        </DataGridColumn>
                        <DataGridColumn TItem="ProcessDefinitionDto" Field="@nameof(ProcessDefinitionDto.Id)" Caption="Definition Id" />
                        <DataGridColumn TItem="ProcessDefinitionDto" Field="@nameof(ProcessDefinitionDto.Version)" Caption="Version" />
                        <DataGridColumn TItem="ProcessDefinitionDto" Field="@nameof(ProcessDefinitionDto.VersionTag)" Caption="Version Tag" />
                        <DataGridColumn TItem="ProcessDefinitionDto" Field="@nameof(ProcessDefinitionDto.Name)" Caption="Name" />
                        <DataGridColumn TItem="ProcessDefinitionDto" Field="@nameof(ProcessDefinitionDto.DeploymentId)" Caption="Deployment Id" />
                        <DataGridColumn TItem="ProcessDefinitionDto" Field="@nameof(ProcessDefinitionDto.Resource)" Caption="Resource" />
                        <DataGridColumn TItem="ProcessDefinitionDto" Field="@nameof(ProcessDefinitionDto.StartableInTasklist)" Caption="Tasklist Startable" />
                        <DataGridColumn TItem="ProcessDefinitionDto" Field="@nameof(ProcessDefinitionDto.Id)">
                            <DisplayTemplate Context="subContext">
                                <Blazorise.Button Color="Color.Primary" Type="ButtonType.Link" To="@("process-definitions/" + subContext.Id)">Process Instances</Blazorise.Button>
                            </DisplayTemplate>
                        </DataGridColumn>

                    </ChildContent>
                </DataGrid>
            </CardBody>
        </Card>

    </DetailRowTemplate>

</DataGrid>


@code {

    [Parameter]
    public CamundaClient camunda { get; set; }

    [Parameter]
    public int pageSize { get; set; } = 50;

    [Parameter]
    public int SubDefinitionsPageSize { get; set; } = 10;

    private List<ProcessDefinitionDto> definitions;
    private int totalDefinitions;

    private List<ProcessDefinitionDto> subDefinitions;
    private int totalSubDefinitions;

    private ProcessDefinitionDto selectedSubDefinition;

    async Task OnReadData(DataGridReadDataEventArgs<ProcessDefinitionDto> e)
    {
        try
        {
            var defs = await camunda.Api.ProcessDefinitionApi.GetProcessDefinitionsAsync(latestVersion: true, firstResult: e.PageSize * (e.Page - 1), maxResults: e.PageSize);
            var total = await camunda.Api.ProcessDefinitionApi.GetProcessDefinitionsCountAsync(latestVersion: true);

            definitions = defs;
            totalDefinitions = Convert.ToInt32(total.Count);
            StateHasChanged();

        }
        catch (Exception exception)
        {
            Console.WriteLine(exception);
            AppData.PushToSnackBar(exception.Message, SnackbarColor.Danger);
        }

    }

    async Task SubDefinitionsOnReadData(DataGridReadDataEventArgs<ProcessDefinitionDto> e)
    {
        var defs = await camunda.Api.ProcessDefinitionApi.GetProcessDefinitionsAsync(
            key: selectedSubDefinition.Key,
            sortBy: "version",
            sortOrder: "desc",
            firstResult: e.PageSize * (e.Page - 1), 
            maxResults: e.PageSize);
        
        var total = await camunda.Api.ProcessDefinitionApi.GetProcessDefinitionsCountAsync(
            key: selectedSubDefinition.Key);
        
        
        // var queryCount = new ProcessDefinitionQuery() { Key = selectedSubDefinition.Key };

        // var defs = await camunda.ProcessDefinitionService.QueryList(query, );
        // var total = await camunda.ProcessDefinitionService.QueryCount(queryCount);

        subDefinitions = defs;
        totalSubDefinitions = Convert.ToInt32(total.Count);
        StateHasChanged();
    }


}
