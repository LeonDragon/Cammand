@using Camunda.Http.Api
@using Camunda.Http.Api.Model
@using Color = MudBlazor.Color
@inject NavigationManager NavigationManager


<MudTable
    T="HistoricProcessInstanceDto"
    ServerData="@(new Func<TableState, Task<TableData<HistoricProcessInstanceDto>>>(GetProcessInstancesFromServer))"
    Hover="true"
    RowsPerPage="PageSize"
    @bind-Loading="@_isLoading"
    Elevation="0">
    <HeaderContent>
        <MudTh>State</MudTh>
        <MudTh>Instance ID</MudTh>
        <MudTh>Business Key</MudTh>
        <MudTh>Start Time</MudTh>
        <MudTh>End Time</MudTh>
        <MudTh>Started By</MudTh>
        <MudTh></MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="State">
            @if (context.State == HistoricProcessInstanceDto.StateEnum.ACTIVE)
            {
                <MudIcon Icon="@Icons.Outlined.PlayCircleOutline" Color="Color.Tertiary" Title="Active"/>
            }
            else if (context.State == HistoricProcessInstanceDto.StateEnum.SUSPENDED)
            
            {
                <MudIcon Icon="@Icons.Outlined.PauseCircleOutline" Color="Color.Default" Title="Suspended"/>
            }
            else if (context.State == HistoricProcessInstanceDto.StateEnum.COMPLETED)
            {
                <MudIcon Icon="@Icons.Outlined.CheckCircleOutline" Color="Color.Success" Title="Completed"/>
            }
            else
            {
                <MudIcon Icon="@Icons.Outlined.HelpOutline" Color="Color.Error" Title=@($"UNKNOWN:{context.State.ToString()}")/>
            }
        </MudTd>
        <MudTd DataLabel="Instance ID">@context.Id</MudTd>
        <MudTd DataLabel="Business Key">@context.BusinessKey</MudTd>
        <MudTd DataLabel="Start Time">@context.StartTime</MudTd>
        <MudTd DataLabel="End Time">@context.EndTime</MudTd>
        <MudTd DataLabel="Started By">@context.StartUserId</MudTd>
        <MudTd DataLabel="Actions">
            <MudIconButton Icon="@Icons.Outlined.Info" OnClick="@(() => OnDetailsClick(context.Id))" Title="Process Instance Details"/>
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>


@code {

    [Parameter]
    public CamundaClient Camunda { get; set; }

    [Parameter]
    public string ProcessDefinitionId { get; set; }

    [Parameter]
    public int PageSize { get; set; } = 10;

    private List<HistoricProcessInstanceDto> _instances;
    private int _totalInstances;

    bool _isLoading;


    private async Task<TableData<HistoricProcessInstanceDto>> GetProcessInstancesFromServer(TableState state)
    {
        _isLoading = true;
        StateHasChanged();

        var query = new HistoricProcessInstanceQueryDto
        {
            ProcessDefinitionId = ProcessDefinitionId,
            Sorting = new List<HistoricProcessInstanceQueryDtoSorting>
            {
                new()
                {
                    SortBy = HistoricProcessInstanceQueryDtoSorting.SortByEnum.StartTime,
                    SortOrder = HistoricProcessInstanceQueryDtoSorting.SortOrderEnum.Desc
                }
            }
        };

        var queryCount = new HistoricProcessInstanceQueryDto {ProcessDefinitionId = ProcessDefinitionId};

        _instances = await Camunda.Api.HistoricProcessInstanceApi.QueryHistoricProcessInstancesAsync(
            state.PageSize * (state.Page),
            state.PageSize,
            query);

        _totalInstances = Convert.ToInt32((await Camunda.Api.HistoricProcessInstanceApi.QueryHistoricProcessInstancesCountAsync(queryCount)).Count);

        _isLoading = false;
        StateHasChanged();

        return new TableData<HistoricProcessInstanceDto>()
        {
            Items = _instances,
            TotalItems = _totalInstances
        };
    }

    void OnDetailsClick(string instanceId)
    {
        NavigationManager.NavigateTo($"process-instances/{instanceId}");
    }


}