@using Camunda.Http.Api
@using Camunda.Http.Api.Model


<DataGrid TItem="IncidentDto" 
          Data="@incidents" 
          ReadData="@OnReadData" 
          ShowPager="true" 
          TotalItems="@totalIncidents" 
          PageSize="@PageSize">
    <EmptyTemplate>
        <div class="box">
            No incidents found!
        </div>
    </EmptyTemplate>

    <LoadingTemplate>
        <div class="box">
            Loading...
        </div>
    </LoadingTemplate>

    <ChildContent>
        <DataGridColumn TItem="IncidentDto" Field="@nameof(IncidentDto.IncidentMessage)" Caption="Message" />
        <DataGridDateColumn TItem="IncidentDto" Field="@nameof(IncidentDto.IncidentTimestamp)" Caption="Incident Timestamp" />
        <DataGridColumn TItem="IncidentDto" Field="@nameof(IncidentDto.ActivityId)" Caption="Activity Id" />
        <DataGridColumn TItem="IncidentDto" Field="@nameof(IncidentDto.CauseIncidentId)" Caption="Cause Incident Id" />
        <DataGridColumn TItem="IncidentDto" Field="@nameof(IncidentDto.RootCauseIncidentId)" Caption="Root Cause Incident Id" />
        <DataGridColumn TItem="IncidentDto" Field="@nameof(IncidentDto.IncidentType)" Caption="Type" />
    </ChildContent>
</DataGrid>


@code {

    [Parameter]
    public CamundaClient Camunda { get; set; }

    [Parameter]
    public int PageSize { get; set; } = 25;

    [Parameter]
    public string ProcessInstanceId { get; set; }

    private List<IncidentDto> incidents;

    private int totalIncidents;

    async Task OnReadData(DataGridReadDataEventArgs<IncidentDto> e)
    {
        incidents = await Camunda.Api.IncidentApi.GetIncidentsAsync(
            processInstanceId: ProcessInstanceId,
            sortBy: "incidentTimestamp",
            sortOrder: "desc"
            );

        totalIncidents = Convert.ToInt32((await Camunda.Api.IncidentApi.GetIncidentsCountAsync(processInstanceId: ProcessInstanceId)).Count);

        StateHasChanged();
    }
}
