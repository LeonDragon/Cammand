@using Camunda.Http.Api
@using Camunda.Http.Api.Model

<MudTable
    T="JobDto"
    ServerData="@(new Func<TableState, Task<TableData<JobDto>>>(GetDataFromServer))"
    Hover="true"
    RowsPerPage="PageSize"
    @bind-Loading="@_isLoading"
    OnRowClick="@OnRowClicked"
    Elevation="0">
    <HeaderContent>
        <MudTh>State</MudTh>
        <MudTh>Id</MudTh>
        <MudTh>Create Time</MudTh>
        <MudTh>Due</MudTh>
        <MudTh>Retries</MudTh>
        <MudTh>Priority</MudTh>
        <MudTh>Job Definition Id</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="State">
            @if (context.Suspended == true)
            {
                <MudText>Suspended</MudText>
            }
            else
            {
                <MudText>Active</MudText>
            }
        </MudTd>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Create Time">@context.CreateTime</MudTd>
        <MudTd DataLabel="Due">@context.DueDate</MudTd>
        <MudTd DataLabel="Retries">@context.Retries</MudTd>
        <MudTd DataLabel="Priority">@context.Priority</MudTd>
        <MudTd DataLabel="Job Definition Id">@context.JobDefinitionId</MudTd>
    </RowTemplate>

    <ChildRowContent Context="parentContext">
        @if (_selectedJob?.Id == parentContext.Id)
        {
            <MudTr>
                <td colspan="100">
                    <MudCard Elevation="0" Outlined="true">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.body1">Job Details</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent Context="parentContext">
                            <MudText>Failed Activity Id: @parentContext.FailedActivityId</MudText>
                            <MudText>Job Def Id: @parentContext.JobDefinitionId</MudText>
                            <MudText>Job Exception Message: @parentContext.ExceptionMessage</MudText>
                        </MudCardContent>
                    </MudCard>
                </td>
            </MudTr>
        }
    </ChildRowContent>

    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>


@code {

    [Parameter]
    public CamundaClient Camunda { get; set; }

    [Parameter]
    public int PageSize { get; set; } = 10;

    [Parameter]
    public string ProcessInstanceId { get; set; }

    private List<JobDto> _jobs;
    
    private JobDto _selectedJob;

    private int _totalJobs;
    
    bool _isLoading;

    async Task<TableData<JobDto>> GetDataFromServer(TableState state)
    {
        _isLoading = true;
        StateHasChanged();

        _jobs = await Camunda.Api.JobApi.GetJobsAsync(
            processInstanceId: ProcessInstanceId,
            sortBy: "jobDueDate",
            sortOrder: "desc",
            firstResult: state.PageSize * (state.Page),
            maxResults: state.PageSize
            );

        _totalJobs = Convert.ToInt32((await Camunda.Api.JobApi.GetJobsCountAsync(processInstanceId: ProcessInstanceId)).Count);

        _isLoading = false;
        StateHasChanged();

        return new TableData<JobDto>
        {
            Items = _jobs,
            TotalItems = _totalJobs,
        };
    }
    
    void OnRowClicked(TableRowClickEventArgs<JobDto> clickedRow)
    {
        if (!clickedRow.Item.Equals(_selectedJob))
        {
            _selectedJob = clickedRow.Item;
        }
        else
        {
            _selectedJob = null;
        }
    }
}
