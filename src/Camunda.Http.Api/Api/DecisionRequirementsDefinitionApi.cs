/*
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0-alpha1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Camunda.Http.Api.Client;
using Camunda.Http.Api.Model;

namespace Camunda.Http.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDecisionRequirementsDefinitionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Decision Requirements Definition by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision requirements definition to be retrieved.</param>
        /// <returns>DecisionRequirementsDefinitionDto</returns>
        DecisionRequirementsDefinitionDto GetDecisionRequirementsDefinitionById(string id);

        /// <summary>
        /// Get Decision Requirements Definition by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision requirements definition to be retrieved.</param>
        /// <returns>ApiResponse of DecisionRequirementsDefinitionDto</returns>
        ApiResponse<DecisionRequirementsDefinitionDto> GetDecisionRequirementsDefinitionByIdWithHttpInfo(string id);
        /// <summary>
        /// Get Decision Requirements Definition by Key
        /// </summary>
        /// <remarks>
        /// Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine.  Returns the latest version of the decision requirements definition  which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <returns>DecisionRequirementsDefinitionDto</returns>
        DecisionRequirementsDefinitionDto GetDecisionRequirementsDefinitionByKey(string key);

        /// <summary>
        /// Get Decision Requirements Definition by Key
        /// </summary>
        /// <remarks>
        /// Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine.  Returns the latest version of the decision requirements definition  which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <returns>ApiResponse of DecisionRequirementsDefinitionDto</returns>
        ApiResponse<DecisionRequirementsDefinitionDto> GetDecisionRequirementsDefinitionByKeyWithHttpInfo(string key);
        /// <summary>
        /// Get Decision Requirements Definition by Key and Tenant ID
        /// </summary>
        /// <remarks>
        /// Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine. Returns the latest version of the decision requirements definition  for a tenant.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant to which the decision requirements definition belongs to.</param>
        /// <returns>DecisionRequirementsDefinitionDto</returns>
        DecisionRequirementsDefinitionDto GetDecisionRequirementsDefinitionByKeyAndTenantId(string key, string tenantId);

        /// <summary>
        /// Get Decision Requirements Definition by Key and Tenant ID
        /// </summary>
        /// <remarks>
        /// Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine. Returns the latest version of the decision requirements definition  for a tenant.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant to which the decision requirements definition belongs to.</param>
        /// <returns>ApiResponse of DecisionRequirementsDefinitionDto</returns>
        ApiResponse<DecisionRequirementsDefinitionDto> GetDecisionRequirementsDefinitionByKeyAndTenantIdWithHttpInfo(string key, string tenantId);
        /// <summary>
        /// Get Decision Requirements Diagram by ID
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram of a decision requirements definition.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision requirements definition.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetDecisionRequirementsDefinitionDiagramById(string id);

        /// <summary>
        /// Get Decision Requirements Diagram by ID
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram of a decision requirements definition.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision requirements definition.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetDecisionRequirementsDefinitionDiagramByIdWithHttpInfo(string id);
        /// <summary>
        /// Get Decision Requirements Diagram by Key
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram of a decision requirements definition. Returns the diagram for the latest version of the decision requirements  definition which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetDecisionRequirementsDefinitionDiagramByKey(string key);

        /// <summary>
        /// Get Decision Requirements Diagram by Key
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram of a decision requirements definition. Returns the diagram for the latest version of the decision requirements  definition which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetDecisionRequirementsDefinitionDiagramByKeyWithHttpInfo(string key);
        /// <summary>
        /// Get Decision Requirements Diagram by Key and Tenant ID
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram of a decision requirements definition. Returns the diagram of the latest version of the decision requirements  definition for a tenant.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant to which the decision requirements definition belongs to.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetDecisionRequirementsDefinitionDiagramByKeyAndTenantId(string key, string tenantId);

        /// <summary>
        /// Get Decision Requirements Diagram by Key and Tenant ID
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram of a decision requirements definition. Returns the diagram of the latest version of the decision requirements  definition for a tenant.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant to which the decision requirements definition belongs to.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetDecisionRequirementsDefinitionDiagramByKeyAndTenantIdWithHttpInfo(string key, string tenantId);
        /// <summary>
        /// Get DMN XML by ID
        /// </summary>
        /// <remarks>
        /// Retrieves the DMN XML of a decision requirements definition.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision requirements definition.</param>
        /// <returns>DecisionRequirementsDefinitionXmlDto</returns>
        DecisionRequirementsDefinitionXmlDto GetDecisionRequirementsDefinitionDmnXmlById(string id);

        /// <summary>
        /// Get DMN XML by ID
        /// </summary>
        /// <remarks>
        /// Retrieves the DMN XML of a decision requirements definition.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision requirements definition.</param>
        /// <returns>ApiResponse of DecisionRequirementsDefinitionXmlDto</returns>
        ApiResponse<DecisionRequirementsDefinitionXmlDto> GetDecisionRequirementsDefinitionDmnXmlByIdWithHttpInfo(string id);
        /// <summary>
        /// Get DMN XML by Key
        /// </summary>
        /// <remarks>
        /// Retrieves the DMN XML of a decision requirements definition. Returns the XML for the latest version of the decision requirements  definition which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <returns>DecisionRequirementsDefinitionXmlDto</returns>
        DecisionRequirementsDefinitionXmlDto GetDecisionRequirementsDefinitionDmnXmlByKey(string key);

        /// <summary>
        /// Get DMN XML by Key
        /// </summary>
        /// <remarks>
        /// Retrieves the DMN XML of a decision requirements definition. Returns the XML for the latest version of the decision requirements  definition which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <returns>ApiResponse of DecisionRequirementsDefinitionXmlDto</returns>
        ApiResponse<DecisionRequirementsDefinitionXmlDto> GetDecisionRequirementsDefinitionDmnXmlByKeyWithHttpInfo(string key);
        /// <summary>
        /// Get DMN XML by Key and Tenant ID
        /// </summary>
        /// <remarks>
        /// Retrieves the DMN XML of a decision requirements definition. Returns the XML of the latest version of the decision requirements  definition for a tenant.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant to which the decision requirements definition belongs to.</param>
        /// <returns>DecisionRequirementsDefinitionXmlDto</returns>
        DecisionRequirementsDefinitionXmlDto GetDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId(string key, string tenantId);

        /// <summary>
        /// Get DMN XML by Key and Tenant ID
        /// </summary>
        /// <remarks>
        /// Retrieves the DMN XML of a decision requirements definition. Returns the XML of the latest version of the decision requirements  definition for a tenant.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant to which the decision requirements definition belongs to.</param>
        /// <returns>ApiResponse of DecisionRequirementsDefinitionXmlDto</returns>
        ApiResponse<DecisionRequirementsDefinitionXmlDto> GetDecisionRequirementsDefinitionDmnXmlByKeyAndTenantIdWithHttpInfo(string key, string tenantId);
        /// <summary>
        /// Get Decision Requirements Definitions
        /// </summary>
        /// <remarks>
        /// Queries for decision requirements definitions that fulfill given parameters. Parameters may be the properties of decision requirements definitions, such as the name, key or version.  The size of the result set can be retrieved by using the [Get Decision Requirements Definition Count](https://docs.camunda.org/manual/latest/reference/rest/decision-requirements-definition/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionRequirementsDefinitionId">Filter by decision requirements definition id. (optional)</param>
        /// <param name="decisionRequirementsDefinitionIdIn">Filter by decision requirements definition ids. (optional)</param>
        /// <param name="name">Filter by decision requirements definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision requirements definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the id of the deployment a decision requirement definition belongs to. (optional)</param>
        /// <param name="key">Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision requirements definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision requirements definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision requirements definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision requirements definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision requirements definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionRequirementsDefinitionsWithoutTenantId">Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;DecisionRequirementsDefinitionDto&gt;</returns>
        List<DecisionRequirementsDefinitionDto> GetDecisionRequirementsDefinitions(string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionRequirementsDefinitionsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));

        /// <summary>
        /// Get Decision Requirements Definitions
        /// </summary>
        /// <remarks>
        /// Queries for decision requirements definitions that fulfill given parameters. Parameters may be the properties of decision requirements definitions, such as the name, key or version.  The size of the result set can be retrieved by using the [Get Decision Requirements Definition Count](https://docs.camunda.org/manual/latest/reference/rest/decision-requirements-definition/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionRequirementsDefinitionId">Filter by decision requirements definition id. (optional)</param>
        /// <param name="decisionRequirementsDefinitionIdIn">Filter by decision requirements definition ids. (optional)</param>
        /// <param name="name">Filter by decision requirements definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision requirements definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the id of the deployment a decision requirement definition belongs to. (optional)</param>
        /// <param name="key">Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision requirements definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision requirements definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision requirements definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision requirements definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision requirements definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionRequirementsDefinitionsWithoutTenantId">Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;DecisionRequirementsDefinitionDto&gt;</returns>
        ApiResponse<List<DecisionRequirementsDefinitionDto>> GetDecisionRequirementsDefinitionsWithHttpInfo(string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionRequirementsDefinitionsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?));
        /// <summary>
        /// Get Decision Requirements Definition Count
        /// </summary>
        /// <remarks>
        /// Requests the number of decision requirements definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Requirements Definitions](https://docs.camunda.org/manual/latest/reference/rest/decision-requirements-definition/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionRequirementsDefinitionId">Filter by decision requirements definition id. (optional)</param>
        /// <param name="decisionRequirementsDefinitionIdIn">Filter by decision requirements definition ids. (optional)</param>
        /// <param name="name">Filter by decision requirements definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision requirements definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the id of the deployment a decision requirement definition belongs to. (optional)</param>
        /// <param name="key">Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision requirements definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision requirements definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision requirements definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision requirements definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision requirements definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionRequirementsDefinitionsWithoutTenantId">Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>CountResultDto</returns>
        CountResultDto GetDecisionRequirementsDefinitionsCount(string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionRequirementsDefinitionsWithoutTenantId = default(bool?));

        /// <summary>
        /// Get Decision Requirements Definition Count
        /// </summary>
        /// <remarks>
        /// Requests the number of decision requirements definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Requirements Definitions](https://docs.camunda.org/manual/latest/reference/rest/decision-requirements-definition/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionRequirementsDefinitionId">Filter by decision requirements definition id. (optional)</param>
        /// <param name="decisionRequirementsDefinitionIdIn">Filter by decision requirements definition ids. (optional)</param>
        /// <param name="name">Filter by decision requirements definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision requirements definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the id of the deployment a decision requirement definition belongs to. (optional)</param>
        /// <param name="key">Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision requirements definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision requirements definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision requirements definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision requirements definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision requirements definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionRequirementsDefinitionsWithoutTenantId">Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        ApiResponse<CountResultDto> GetDecisionRequirementsDefinitionsCountWithHttpInfo(string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionRequirementsDefinitionsWithoutTenantId = default(bool?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDecisionRequirementsDefinitionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Decision Requirements Definition by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision requirements definition to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecisionRequirementsDefinitionDto</returns>
        System.Threading.Tasks.Task<DecisionRequirementsDefinitionDto> GetDecisionRequirementsDefinitionByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Decision Requirements Definition by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision requirements definition to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecisionRequirementsDefinitionDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DecisionRequirementsDefinitionDto>> GetDecisionRequirementsDefinitionByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Decision Requirements Definition by Key
        /// </summary>
        /// <remarks>
        /// Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine.  Returns the latest version of the decision requirements definition  which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecisionRequirementsDefinitionDto</returns>
        System.Threading.Tasks.Task<DecisionRequirementsDefinitionDto> GetDecisionRequirementsDefinitionByKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Decision Requirements Definition by Key
        /// </summary>
        /// <remarks>
        /// Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine.  Returns the latest version of the decision requirements definition  which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecisionRequirementsDefinitionDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DecisionRequirementsDefinitionDto>> GetDecisionRequirementsDefinitionByKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Decision Requirements Definition by Key and Tenant ID
        /// </summary>
        /// <remarks>
        /// Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine. Returns the latest version of the decision requirements definition  for a tenant.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant to which the decision requirements definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecisionRequirementsDefinitionDto</returns>
        System.Threading.Tasks.Task<DecisionRequirementsDefinitionDto> GetDecisionRequirementsDefinitionByKeyAndTenantIdAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Decision Requirements Definition by Key and Tenant ID
        /// </summary>
        /// <remarks>
        /// Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine. Returns the latest version of the decision requirements definition  for a tenant.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant to which the decision requirements definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecisionRequirementsDefinitionDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DecisionRequirementsDefinitionDto>> GetDecisionRequirementsDefinitionByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Decision Requirements Diagram by ID
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram of a decision requirements definition.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision requirements definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDecisionRequirementsDefinitionDiagramByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Decision Requirements Diagram by ID
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram of a decision requirements definition.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision requirements definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDecisionRequirementsDefinitionDiagramByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Decision Requirements Diagram by Key
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram of a decision requirements definition. Returns the diagram for the latest version of the decision requirements  definition which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDecisionRequirementsDefinitionDiagramByKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Decision Requirements Diagram by Key
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram of a decision requirements definition. Returns the diagram for the latest version of the decision requirements  definition which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDecisionRequirementsDefinitionDiagramByKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Decision Requirements Diagram by Key and Tenant ID
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram of a decision requirements definition. Returns the diagram of the latest version of the decision requirements  definition for a tenant.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant to which the decision requirements definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDecisionRequirementsDefinitionDiagramByKeyAndTenantIdAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Decision Requirements Diagram by Key and Tenant ID
        /// </summary>
        /// <remarks>
        /// Retrieves the diagram of a decision requirements definition. Returns the diagram of the latest version of the decision requirements  definition for a tenant.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant to which the decision requirements definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDecisionRequirementsDefinitionDiagramByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get DMN XML by ID
        /// </summary>
        /// <remarks>
        /// Retrieves the DMN XML of a decision requirements definition.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision requirements definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecisionRequirementsDefinitionXmlDto</returns>
        System.Threading.Tasks.Task<DecisionRequirementsDefinitionXmlDto> GetDecisionRequirementsDefinitionDmnXmlByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get DMN XML by ID
        /// </summary>
        /// <remarks>
        /// Retrieves the DMN XML of a decision requirements definition.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision requirements definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecisionRequirementsDefinitionXmlDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DecisionRequirementsDefinitionXmlDto>> GetDecisionRequirementsDefinitionDmnXmlByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get DMN XML by Key
        /// </summary>
        /// <remarks>
        /// Retrieves the DMN XML of a decision requirements definition. Returns the XML for the latest version of the decision requirements  definition which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecisionRequirementsDefinitionXmlDto</returns>
        System.Threading.Tasks.Task<DecisionRequirementsDefinitionXmlDto> GetDecisionRequirementsDefinitionDmnXmlByKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get DMN XML by Key
        /// </summary>
        /// <remarks>
        /// Retrieves the DMN XML of a decision requirements definition. Returns the XML for the latest version of the decision requirements  definition which belongs to no tenant.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecisionRequirementsDefinitionXmlDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DecisionRequirementsDefinitionXmlDto>> GetDecisionRequirementsDefinitionDmnXmlByKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get DMN XML by Key and Tenant ID
        /// </summary>
        /// <remarks>
        /// Retrieves the DMN XML of a decision requirements definition. Returns the XML of the latest version of the decision requirements  definition for a tenant.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant to which the decision requirements definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecisionRequirementsDefinitionXmlDto</returns>
        System.Threading.Tasks.Task<DecisionRequirementsDefinitionXmlDto> GetDecisionRequirementsDefinitionDmnXmlByKeyAndTenantIdAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get DMN XML by Key and Tenant ID
        /// </summary>
        /// <remarks>
        /// Retrieves the DMN XML of a decision requirements definition. Returns the XML of the latest version of the decision requirements  definition for a tenant.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant to which the decision requirements definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecisionRequirementsDefinitionXmlDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DecisionRequirementsDefinitionXmlDto>> GetDecisionRequirementsDefinitionDmnXmlByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Decision Requirements Definitions
        /// </summary>
        /// <remarks>
        /// Queries for decision requirements definitions that fulfill given parameters. Parameters may be the properties of decision requirements definitions, such as the name, key or version.  The size of the result set can be retrieved by using the [Get Decision Requirements Definition Count](https://docs.camunda.org/manual/latest/reference/rest/decision-requirements-definition/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionRequirementsDefinitionId">Filter by decision requirements definition id. (optional)</param>
        /// <param name="decisionRequirementsDefinitionIdIn">Filter by decision requirements definition ids. (optional)</param>
        /// <param name="name">Filter by decision requirements definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision requirements definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the id of the deployment a decision requirement definition belongs to. (optional)</param>
        /// <param name="key">Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision requirements definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision requirements definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision requirements definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision requirements definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision requirements definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionRequirementsDefinitionsWithoutTenantId">Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DecisionRequirementsDefinitionDto&gt;</returns>
        System.Threading.Tasks.Task<List<DecisionRequirementsDefinitionDto>> GetDecisionRequirementsDefinitionsAsync(string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionRequirementsDefinitionsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Decision Requirements Definitions
        /// </summary>
        /// <remarks>
        /// Queries for decision requirements definitions that fulfill given parameters. Parameters may be the properties of decision requirements definitions, such as the name, key or version.  The size of the result set can be retrieved by using the [Get Decision Requirements Definition Count](https://docs.camunda.org/manual/latest/reference/rest/decision-requirements-definition/get-query-count/) method.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionRequirementsDefinitionId">Filter by decision requirements definition id. (optional)</param>
        /// <param name="decisionRequirementsDefinitionIdIn">Filter by decision requirements definition ids. (optional)</param>
        /// <param name="name">Filter by decision requirements definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision requirements definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the id of the deployment a decision requirement definition belongs to. (optional)</param>
        /// <param name="key">Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision requirements definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision requirements definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision requirements definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision requirements definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision requirements definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionRequirementsDefinitionsWithoutTenantId">Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DecisionRequirementsDefinitionDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DecisionRequirementsDefinitionDto>>> GetDecisionRequirementsDefinitionsWithHttpInfoAsync(string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionRequirementsDefinitionsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Decision Requirements Definition Count
        /// </summary>
        /// <remarks>
        /// Requests the number of decision requirements definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Requirements Definitions](https://docs.camunda.org/manual/latest/reference/rest/decision-requirements-definition/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionRequirementsDefinitionId">Filter by decision requirements definition id. (optional)</param>
        /// <param name="decisionRequirementsDefinitionIdIn">Filter by decision requirements definition ids. (optional)</param>
        /// <param name="name">Filter by decision requirements definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision requirements definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the id of the deployment a decision requirement definition belongs to. (optional)</param>
        /// <param name="key">Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision requirements definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision requirements definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision requirements definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision requirements definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision requirements definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionRequirementsDefinitionsWithoutTenantId">Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        System.Threading.Tasks.Task<CountResultDto> GetDecisionRequirementsDefinitionsCountAsync(string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionRequirementsDefinitionsWithoutTenantId = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Decision Requirements Definition Count
        /// </summary>
        /// <remarks>
        /// Requests the number of decision requirements definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Requirements Definitions](https://docs.camunda.org/manual/latest/reference/rest/decision-requirements-definition/get-query/) method.
        /// </remarks>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionRequirementsDefinitionId">Filter by decision requirements definition id. (optional)</param>
        /// <param name="decisionRequirementsDefinitionIdIn">Filter by decision requirements definition ids. (optional)</param>
        /// <param name="name">Filter by decision requirements definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision requirements definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the id of the deployment a decision requirement definition belongs to. (optional)</param>
        /// <param name="key">Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision requirements definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision requirements definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision requirements definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision requirements definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision requirements definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionRequirementsDefinitionsWithoutTenantId">Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountResultDto>> GetDecisionRequirementsDefinitionsCountWithHttpInfoAsync(string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionRequirementsDefinitionsWithoutTenantId = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDecisionRequirementsDefinitionApi : IDecisionRequirementsDefinitionApiSync, IDecisionRequirementsDefinitionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DecisionRequirementsDefinitionApi : IDisposable, IDecisionRequirementsDefinitionApi
    {
        private Camunda.Http.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DecisionRequirementsDefinitionApi"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <returns></returns>
        public DecisionRequirementsDefinitionApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DecisionRequirementsDefinitionApi"/> class.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public DecisionRequirementsDefinitionApi(String basePath)
        {
            this.Configuration = Camunda.Http.Api.Client.Configuration.MergeConfigurations(
                Camunda.Http.Api.Client.GlobalConfiguration.Instance,
                new Camunda.Http.Api.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Camunda.Http.Api.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Camunda.Http.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DecisionRequirementsDefinitionApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an istance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHander</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public DecisionRequirementsDefinitionApi(Camunda.Http.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Camunda.Http.Api.Client.Configuration.MergeConfigurations(
                Camunda.Http.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Camunda.Http.Api.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Camunda.Http.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DecisionRequirementsDefinitionApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DecisionRequirementsDefinitionApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DecisionRequirementsDefinitionApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DecisionRequirementsDefinitionApi(HttpClient client, String basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Camunda.Http.Api.Client.Configuration.MergeConfigurations(
                Camunda.Http.Api.Client.GlobalConfiguration.Instance,
                new Camunda.Http.Api.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Camunda.Http.Api.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Camunda.Http.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DecisionRequirementsDefinitionApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public DecisionRequirementsDefinitionApi(HttpClient client, Camunda.Http.Api.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Camunda.Http.Api.Client.Configuration.MergeConfigurations(
                Camunda.Http.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Camunda.Http.Api.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Camunda.Http.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DecisionRequirementsDefinitionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public DecisionRequirementsDefinitionApi(Camunda.Http.Api.Client.ISynchronousClient client, Camunda.Http.Api.Client.IAsynchronousClient asyncClient, Camunda.Http.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Camunda.Http.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Camunda.Http.Api.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Camunda.Http.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Camunda.Http.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Camunda.Http.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Camunda.Http.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Decision Requirements Definition by ID Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision requirements definition to be retrieved.</param>
        /// <returns>DecisionRequirementsDefinitionDto</returns>
        public DecisionRequirementsDefinitionDto GetDecisionRequirementsDefinitionById(string id)
        {
            Camunda.Http.Api.Client.ApiResponse<DecisionRequirementsDefinitionDto> localVarResponse = GetDecisionRequirementsDefinitionByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Decision Requirements Definition by ID Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision requirements definition to be retrieved.</param>
        /// <returns>ApiResponse of DecisionRequirementsDefinitionDto</returns>
        public Camunda.Http.Api.Client.ApiResponse<DecisionRequirementsDefinitionDto> GetDecisionRequirementsDefinitionByIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.Http.Api.Client.ApiException(400, "Missing required parameter 'id' when calling DecisionRequirementsDefinitionApi->GetDecisionRequirementsDefinitionById");

            Camunda.Http.Api.Client.RequestOptions localVarRequestOptions = new Camunda.Http.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.Http.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.Http.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.Http.Api.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DecisionRequirementsDefinitionDto>("/decision-requirements-definition/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionRequirementsDefinitionById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Decision Requirements Definition by ID Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision requirements definition to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecisionRequirementsDefinitionDto</returns>
        public async System.Threading.Tasks.Task<DecisionRequirementsDefinitionDto> GetDecisionRequirementsDefinitionByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.Http.Api.Client.ApiResponse<DecisionRequirementsDefinitionDto> localVarResponse = await GetDecisionRequirementsDefinitionByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Decision Requirements Definition by ID Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision requirements definition to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecisionRequirementsDefinitionDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.Http.Api.Client.ApiResponse<DecisionRequirementsDefinitionDto>> GetDecisionRequirementsDefinitionByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.Http.Api.Client.ApiException(400, "Missing required parameter 'id' when calling DecisionRequirementsDefinitionApi->GetDecisionRequirementsDefinitionById");


            Camunda.Http.Api.Client.RequestOptions localVarRequestOptions = new Camunda.Http.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.Http.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.Http.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.Http.Api.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DecisionRequirementsDefinitionDto>("/decision-requirements-definition/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionRequirementsDefinitionById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Decision Requirements Definition by Key Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine.  Returns the latest version of the decision requirements definition  which belongs to no tenant.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <returns>DecisionRequirementsDefinitionDto</returns>
        public DecisionRequirementsDefinitionDto GetDecisionRequirementsDefinitionByKey(string key)
        {
            Camunda.Http.Api.Client.ApiResponse<DecisionRequirementsDefinitionDto> localVarResponse = GetDecisionRequirementsDefinitionByKeyWithHttpInfo(key);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Decision Requirements Definition by Key Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine.  Returns the latest version of the decision requirements definition  which belongs to no tenant.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <returns>ApiResponse of DecisionRequirementsDefinitionDto</returns>
        public Camunda.Http.Api.Client.ApiResponse<DecisionRequirementsDefinitionDto> GetDecisionRequirementsDefinitionByKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.Http.Api.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionRequirementsDefinitionApi->GetDecisionRequirementsDefinitionByKey");

            Camunda.Http.Api.Client.RequestOptions localVarRequestOptions = new Camunda.Http.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.Http.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.Http.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.Http.Api.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DecisionRequirementsDefinitionDto>("/decision-requirements-definition/key/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionRequirementsDefinitionByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Decision Requirements Definition by Key Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine.  Returns the latest version of the decision requirements definition  which belongs to no tenant.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecisionRequirementsDefinitionDto</returns>
        public async System.Threading.Tasks.Task<DecisionRequirementsDefinitionDto> GetDecisionRequirementsDefinitionByKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.Http.Api.Client.ApiResponse<DecisionRequirementsDefinitionDto> localVarResponse = await GetDecisionRequirementsDefinitionByKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Decision Requirements Definition by Key Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine.  Returns the latest version of the decision requirements definition  which belongs to no tenant.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecisionRequirementsDefinitionDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.Http.Api.Client.ApiResponse<DecisionRequirementsDefinitionDto>> GetDecisionRequirementsDefinitionByKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.Http.Api.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionRequirementsDefinitionApi->GetDecisionRequirementsDefinitionByKey");


            Camunda.Http.Api.Client.RequestOptions localVarRequestOptions = new Camunda.Http.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.Http.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.Http.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.Http.Api.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DecisionRequirementsDefinitionDto>("/decision-requirements-definition/key/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionRequirementsDefinitionByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Decision Requirements Definition by Key and Tenant ID Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine. Returns the latest version of the decision requirements definition  for a tenant.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant to which the decision requirements definition belongs to.</param>
        /// <returns>DecisionRequirementsDefinitionDto</returns>
        public DecisionRequirementsDefinitionDto GetDecisionRequirementsDefinitionByKeyAndTenantId(string key, string tenantId)
        {
            Camunda.Http.Api.Client.ApiResponse<DecisionRequirementsDefinitionDto> localVarResponse = GetDecisionRequirementsDefinitionByKeyAndTenantIdWithHttpInfo(key, tenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Decision Requirements Definition by Key and Tenant ID Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine. Returns the latest version of the decision requirements definition  for a tenant.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant to which the decision requirements definition belongs to.</param>
        /// <returns>ApiResponse of DecisionRequirementsDefinitionDto</returns>
        public Camunda.Http.Api.Client.ApiResponse<DecisionRequirementsDefinitionDto> GetDecisionRequirementsDefinitionByKeyAndTenantIdWithHttpInfo(string key, string tenantId)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.Http.Api.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionRequirementsDefinitionApi->GetDecisionRequirementsDefinitionByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.Http.Api.Client.ApiException(400, "Missing required parameter 'tenantId' when calling DecisionRequirementsDefinitionApi->GetDecisionRequirementsDefinitionByKeyAndTenantId");

            Camunda.Http.Api.Client.RequestOptions localVarRequestOptions = new Camunda.Http.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.Http.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.Http.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.Http.Api.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.Http.Api.Client.ClientUtils.ParameterToString(tenantId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DecisionRequirementsDefinitionDto>("/decision-requirements-definition/key/{key}/tenant-id/{tenant-id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionRequirementsDefinitionByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Decision Requirements Definition by Key and Tenant ID Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine. Returns the latest version of the decision requirements definition  for a tenant.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant to which the decision requirements definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecisionRequirementsDefinitionDto</returns>
        public async System.Threading.Tasks.Task<DecisionRequirementsDefinitionDto> GetDecisionRequirementsDefinitionByKeyAndTenantIdAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.Http.Api.Client.ApiResponse<DecisionRequirementsDefinitionDto> localVarResponse = await GetDecisionRequirementsDefinitionByKeyAndTenantIdWithHttpInfoAsync(key, tenantId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Decision Requirements Definition by Key and Tenant ID Retrieves a decision requirements definition according to the &#x60;DecisionRequirementsDefinition&#x60; interface in the engine. Returns the latest version of the decision requirements definition  for a tenant.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant to which the decision requirements definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecisionRequirementsDefinitionDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.Http.Api.Client.ApiResponse<DecisionRequirementsDefinitionDto>> GetDecisionRequirementsDefinitionByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.Http.Api.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionRequirementsDefinitionApi->GetDecisionRequirementsDefinitionByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.Http.Api.Client.ApiException(400, "Missing required parameter 'tenantId' when calling DecisionRequirementsDefinitionApi->GetDecisionRequirementsDefinitionByKeyAndTenantId");


            Camunda.Http.Api.Client.RequestOptions localVarRequestOptions = new Camunda.Http.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.Http.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.Http.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.Http.Api.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.Http.Api.Client.ClientUtils.ParameterToString(tenantId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DecisionRequirementsDefinitionDto>("/decision-requirements-definition/key/{key}/tenant-id/{tenant-id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionRequirementsDefinitionByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Decision Requirements Diagram by ID Retrieves the diagram of a decision requirements definition.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision requirements definition.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDecisionRequirementsDefinitionDiagramById(string id)
        {
            Camunda.Http.Api.Client.ApiResponse<System.IO.Stream> localVarResponse = GetDecisionRequirementsDefinitionDiagramByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Decision Requirements Diagram by ID Retrieves the diagram of a decision requirements definition.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision requirements definition.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Camunda.Http.Api.Client.ApiResponse<System.IO.Stream> GetDecisionRequirementsDefinitionDiagramByIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.Http.Api.Client.ApiException(400, "Missing required parameter 'id' when calling DecisionRequirementsDefinitionApi->GetDecisionRequirementsDefinitionDiagramById");

            Camunda.Http.Api.Client.RequestOptions localVarRequestOptions = new Camunda.Http.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "image/_*",
                "application/octet-stream",
                "application/json"
            };

            var localVarContentType = Camunda.Http.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.Http.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.Http.Api.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/decision-requirements-definition/{id}/diagram", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionRequirementsDefinitionDiagramById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Decision Requirements Diagram by ID Retrieves the diagram of a decision requirements definition.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision requirements definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDecisionRequirementsDefinitionDiagramByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.Http.Api.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetDecisionRequirementsDefinitionDiagramByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Decision Requirements Diagram by ID Retrieves the diagram of a decision requirements definition.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision requirements definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Camunda.Http.Api.Client.ApiResponse<System.IO.Stream>> GetDecisionRequirementsDefinitionDiagramByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.Http.Api.Client.ApiException(400, "Missing required parameter 'id' when calling DecisionRequirementsDefinitionApi->GetDecisionRequirementsDefinitionDiagramById");


            Camunda.Http.Api.Client.RequestOptions localVarRequestOptions = new Camunda.Http.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "image/_*",
                "application/octet-stream",
                "application/json"
            };


            var localVarContentType = Camunda.Http.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.Http.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.Http.Api.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/decision-requirements-definition/{id}/diagram", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionRequirementsDefinitionDiagramById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Decision Requirements Diagram by Key Retrieves the diagram of a decision requirements definition. Returns the diagram for the latest version of the decision requirements  definition which belongs to no tenant.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDecisionRequirementsDefinitionDiagramByKey(string key)
        {
            Camunda.Http.Api.Client.ApiResponse<System.IO.Stream> localVarResponse = GetDecisionRequirementsDefinitionDiagramByKeyWithHttpInfo(key);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Decision Requirements Diagram by Key Retrieves the diagram of a decision requirements definition. Returns the diagram for the latest version of the decision requirements  definition which belongs to no tenant.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Camunda.Http.Api.Client.ApiResponse<System.IO.Stream> GetDecisionRequirementsDefinitionDiagramByKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.Http.Api.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionRequirementsDefinitionApi->GetDecisionRequirementsDefinitionDiagramByKey");

            Camunda.Http.Api.Client.RequestOptions localVarRequestOptions = new Camunda.Http.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "image/_*",
                "application/octet-stream",
                "application/json"
            };

            var localVarContentType = Camunda.Http.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.Http.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.Http.Api.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/decision-requirements-definition/key/{key}/diagram", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionRequirementsDefinitionDiagramByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Decision Requirements Diagram by Key Retrieves the diagram of a decision requirements definition. Returns the diagram for the latest version of the decision requirements  definition which belongs to no tenant.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDecisionRequirementsDefinitionDiagramByKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.Http.Api.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetDecisionRequirementsDefinitionDiagramByKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Decision Requirements Diagram by Key Retrieves the diagram of a decision requirements definition. Returns the diagram for the latest version of the decision requirements  definition which belongs to no tenant.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Camunda.Http.Api.Client.ApiResponse<System.IO.Stream>> GetDecisionRequirementsDefinitionDiagramByKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.Http.Api.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionRequirementsDefinitionApi->GetDecisionRequirementsDefinitionDiagramByKey");


            Camunda.Http.Api.Client.RequestOptions localVarRequestOptions = new Camunda.Http.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "image/_*",
                "application/octet-stream",
                "application/json"
            };


            var localVarContentType = Camunda.Http.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.Http.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.Http.Api.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/decision-requirements-definition/key/{key}/diagram", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionRequirementsDefinitionDiagramByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Decision Requirements Diagram by Key and Tenant ID Retrieves the diagram of a decision requirements definition. Returns the diagram of the latest version of the decision requirements  definition for a tenant.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant to which the decision requirements definition belongs to.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDecisionRequirementsDefinitionDiagramByKeyAndTenantId(string key, string tenantId)
        {
            Camunda.Http.Api.Client.ApiResponse<System.IO.Stream> localVarResponse = GetDecisionRequirementsDefinitionDiagramByKeyAndTenantIdWithHttpInfo(key, tenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Decision Requirements Diagram by Key and Tenant ID Retrieves the diagram of a decision requirements definition. Returns the diagram of the latest version of the decision requirements  definition for a tenant.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant to which the decision requirements definition belongs to.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Camunda.Http.Api.Client.ApiResponse<System.IO.Stream> GetDecisionRequirementsDefinitionDiagramByKeyAndTenantIdWithHttpInfo(string key, string tenantId)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.Http.Api.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionRequirementsDefinitionApi->GetDecisionRequirementsDefinitionDiagramByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.Http.Api.Client.ApiException(400, "Missing required parameter 'tenantId' when calling DecisionRequirementsDefinitionApi->GetDecisionRequirementsDefinitionDiagramByKeyAndTenantId");

            Camunda.Http.Api.Client.RequestOptions localVarRequestOptions = new Camunda.Http.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "image/_*",
                "application/octet-stream",
                "application/json"
            };

            var localVarContentType = Camunda.Http.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.Http.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.Http.Api.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.Http.Api.Client.ClientUtils.ParameterToString(tenantId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/decision-requirements-definition/key/{key}/tenant-id/{tenant-id}/diagram", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionRequirementsDefinitionDiagramByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Decision Requirements Diagram by Key and Tenant ID Retrieves the diagram of a decision requirements definition. Returns the diagram of the latest version of the decision requirements  definition for a tenant.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant to which the decision requirements definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDecisionRequirementsDefinitionDiagramByKeyAndTenantIdAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.Http.Api.Client.ApiResponse<System.IO.Stream> localVarResponse = await GetDecisionRequirementsDefinitionDiagramByKeyAndTenantIdWithHttpInfoAsync(key, tenantId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Decision Requirements Diagram by Key and Tenant ID Retrieves the diagram of a decision requirements definition. Returns the diagram of the latest version of the decision requirements  definition for a tenant.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant to which the decision requirements definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Camunda.Http.Api.Client.ApiResponse<System.IO.Stream>> GetDecisionRequirementsDefinitionDiagramByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.Http.Api.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionRequirementsDefinitionApi->GetDecisionRequirementsDefinitionDiagramByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.Http.Api.Client.ApiException(400, "Missing required parameter 'tenantId' when calling DecisionRequirementsDefinitionApi->GetDecisionRequirementsDefinitionDiagramByKeyAndTenantId");


            Camunda.Http.Api.Client.RequestOptions localVarRequestOptions = new Camunda.Http.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "image/_*",
                "application/octet-stream",
                "application/json"
            };


            var localVarContentType = Camunda.Http.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.Http.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.Http.Api.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.Http.Api.Client.ClientUtils.ParameterToString(tenantId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/decision-requirements-definition/key/{key}/tenant-id/{tenant-id}/diagram", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionRequirementsDefinitionDiagramByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get DMN XML by ID Retrieves the DMN XML of a decision requirements definition.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision requirements definition.</param>
        /// <returns>DecisionRequirementsDefinitionXmlDto</returns>
        public DecisionRequirementsDefinitionXmlDto GetDecisionRequirementsDefinitionDmnXmlById(string id)
        {
            Camunda.Http.Api.Client.ApiResponse<DecisionRequirementsDefinitionXmlDto> localVarResponse = GetDecisionRequirementsDefinitionDmnXmlByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get DMN XML by ID Retrieves the DMN XML of a decision requirements definition.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision requirements definition.</param>
        /// <returns>ApiResponse of DecisionRequirementsDefinitionXmlDto</returns>
        public Camunda.Http.Api.Client.ApiResponse<DecisionRequirementsDefinitionXmlDto> GetDecisionRequirementsDefinitionDmnXmlByIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.Http.Api.Client.ApiException(400, "Missing required parameter 'id' when calling DecisionRequirementsDefinitionApi->GetDecisionRequirementsDefinitionDmnXmlById");

            Camunda.Http.Api.Client.RequestOptions localVarRequestOptions = new Camunda.Http.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.Http.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.Http.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.Http.Api.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DecisionRequirementsDefinitionXmlDto>("/decision-requirements-definition/{id}/xml", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionRequirementsDefinitionDmnXmlById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get DMN XML by ID Retrieves the DMN XML of a decision requirements definition.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision requirements definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecisionRequirementsDefinitionXmlDto</returns>
        public async System.Threading.Tasks.Task<DecisionRequirementsDefinitionXmlDto> GetDecisionRequirementsDefinitionDmnXmlByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.Http.Api.Client.ApiResponse<DecisionRequirementsDefinitionXmlDto> localVarResponse = await GetDecisionRequirementsDefinitionDmnXmlByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get DMN XML by ID Retrieves the DMN XML of a decision requirements definition.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the decision requirements definition.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecisionRequirementsDefinitionXmlDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.Http.Api.Client.ApiResponse<DecisionRequirementsDefinitionXmlDto>> GetDecisionRequirementsDefinitionDmnXmlByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Camunda.Http.Api.Client.ApiException(400, "Missing required parameter 'id' when calling DecisionRequirementsDefinitionApi->GetDecisionRequirementsDefinitionDmnXmlById");


            Camunda.Http.Api.Client.RequestOptions localVarRequestOptions = new Camunda.Http.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.Http.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.Http.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Camunda.Http.Api.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DecisionRequirementsDefinitionXmlDto>("/decision-requirements-definition/{id}/xml", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionRequirementsDefinitionDmnXmlById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get DMN XML by Key Retrieves the DMN XML of a decision requirements definition. Returns the XML for the latest version of the decision requirements  definition which belongs to no tenant.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <returns>DecisionRequirementsDefinitionXmlDto</returns>
        public DecisionRequirementsDefinitionXmlDto GetDecisionRequirementsDefinitionDmnXmlByKey(string key)
        {
            Camunda.Http.Api.Client.ApiResponse<DecisionRequirementsDefinitionXmlDto> localVarResponse = GetDecisionRequirementsDefinitionDmnXmlByKeyWithHttpInfo(key);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get DMN XML by Key Retrieves the DMN XML of a decision requirements definition. Returns the XML for the latest version of the decision requirements  definition which belongs to no tenant.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <returns>ApiResponse of DecisionRequirementsDefinitionXmlDto</returns>
        public Camunda.Http.Api.Client.ApiResponse<DecisionRequirementsDefinitionXmlDto> GetDecisionRequirementsDefinitionDmnXmlByKeyWithHttpInfo(string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.Http.Api.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionRequirementsDefinitionApi->GetDecisionRequirementsDefinitionDmnXmlByKey");

            Camunda.Http.Api.Client.RequestOptions localVarRequestOptions = new Camunda.Http.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.Http.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.Http.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.Http.Api.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DecisionRequirementsDefinitionXmlDto>("/decision-requirements-definition/key/{key}/xml", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionRequirementsDefinitionDmnXmlByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get DMN XML by Key Retrieves the DMN XML of a decision requirements definition. Returns the XML for the latest version of the decision requirements  definition which belongs to no tenant.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecisionRequirementsDefinitionXmlDto</returns>
        public async System.Threading.Tasks.Task<DecisionRequirementsDefinitionXmlDto> GetDecisionRequirementsDefinitionDmnXmlByKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.Http.Api.Client.ApiResponse<DecisionRequirementsDefinitionXmlDto> localVarResponse = await GetDecisionRequirementsDefinitionDmnXmlByKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get DMN XML by Key Retrieves the DMN XML of a decision requirements definition. Returns the XML for the latest version of the decision requirements  definition which belongs to no tenant.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecisionRequirementsDefinitionXmlDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.Http.Api.Client.ApiResponse<DecisionRequirementsDefinitionXmlDto>> GetDecisionRequirementsDefinitionDmnXmlByKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.Http.Api.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionRequirementsDefinitionApi->GetDecisionRequirementsDefinitionDmnXmlByKey");


            Camunda.Http.Api.Client.RequestOptions localVarRequestOptions = new Camunda.Http.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.Http.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.Http.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.Http.Api.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DecisionRequirementsDefinitionXmlDto>("/decision-requirements-definition/key/{key}/xml", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionRequirementsDefinitionDmnXmlByKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get DMN XML by Key and Tenant ID Retrieves the DMN XML of a decision requirements definition. Returns the XML of the latest version of the decision requirements  definition for a tenant.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant to which the decision requirements definition belongs to.</param>
        /// <returns>DecisionRequirementsDefinitionXmlDto</returns>
        public DecisionRequirementsDefinitionXmlDto GetDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId(string key, string tenantId)
        {
            Camunda.Http.Api.Client.ApiResponse<DecisionRequirementsDefinitionXmlDto> localVarResponse = GetDecisionRequirementsDefinitionDmnXmlByKeyAndTenantIdWithHttpInfo(key, tenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get DMN XML by Key and Tenant ID Retrieves the DMN XML of a decision requirements definition. Returns the XML of the latest version of the decision requirements  definition for a tenant.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant to which the decision requirements definition belongs to.</param>
        /// <returns>ApiResponse of DecisionRequirementsDefinitionXmlDto</returns>
        public Camunda.Http.Api.Client.ApiResponse<DecisionRequirementsDefinitionXmlDto> GetDecisionRequirementsDefinitionDmnXmlByKeyAndTenantIdWithHttpInfo(string key, string tenantId)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.Http.Api.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionRequirementsDefinitionApi->GetDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.Http.Api.Client.ApiException(400, "Missing required parameter 'tenantId' when calling DecisionRequirementsDefinitionApi->GetDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId");

            Camunda.Http.Api.Client.RequestOptions localVarRequestOptions = new Camunda.Http.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.Http.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.Http.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.Http.Api.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.Http.Api.Client.ClientUtils.ParameterToString(tenantId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<DecisionRequirementsDefinitionXmlDto>("/decision-requirements-definition/key/{key}/tenant-id/{tenant-id}/xml", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get DMN XML by Key and Tenant ID Retrieves the DMN XML of a decision requirements definition. Returns the XML of the latest version of the decision requirements  definition for a tenant.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant to which the decision requirements definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DecisionRequirementsDefinitionXmlDto</returns>
        public async System.Threading.Tasks.Task<DecisionRequirementsDefinitionXmlDto> GetDecisionRequirementsDefinitionDmnXmlByKeyAndTenantIdAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.Http.Api.Client.ApiResponse<DecisionRequirementsDefinitionXmlDto> localVarResponse = await GetDecisionRequirementsDefinitionDmnXmlByKeyAndTenantIdWithHttpInfoAsync(key, tenantId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get DMN XML by Key and Tenant ID Retrieves the DMN XML of a decision requirements definition. Returns the XML of the latest version of the decision requirements  definition for a tenant.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">The key of the decision requirements definition (the latest version thereof) to be retrieved.</param>
        /// <param name="tenantId">The id of the tenant to which the decision requirements definition belongs to.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DecisionRequirementsDefinitionXmlDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.Http.Api.Client.ApiResponse<DecisionRequirementsDefinitionXmlDto>> GetDecisionRequirementsDefinitionDmnXmlByKeyAndTenantIdWithHttpInfoAsync(string key, string tenantId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new Camunda.Http.Api.Client.ApiException(400, "Missing required parameter 'key' when calling DecisionRequirementsDefinitionApi->GetDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId");

            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
                throw new Camunda.Http.Api.Client.ApiException(400, "Missing required parameter 'tenantId' when calling DecisionRequirementsDefinitionApi->GetDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId");


            Camunda.Http.Api.Client.RequestOptions localVarRequestOptions = new Camunda.Http.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.Http.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.Http.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", Camunda.Http.Api.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("tenant-id", Camunda.Http.Api.Client.ClientUtils.ParameterToString(tenantId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DecisionRequirementsDefinitionXmlDto>("/decision-requirements-definition/key/{key}/tenant-id/{tenant-id}/xml", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionRequirementsDefinitionDmnXmlByKeyAndTenantId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Decision Requirements Definitions Queries for decision requirements definitions that fulfill given parameters. Parameters may be the properties of decision requirements definitions, such as the name, key or version.  The size of the result set can be retrieved by using the [Get Decision Requirements Definition Count](https://docs.camunda.org/manual/latest/reference/rest/decision-requirements-definition/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionRequirementsDefinitionId">Filter by decision requirements definition id. (optional)</param>
        /// <param name="decisionRequirementsDefinitionIdIn">Filter by decision requirements definition ids. (optional)</param>
        /// <param name="name">Filter by decision requirements definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision requirements definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the id of the deployment a decision requirement definition belongs to. (optional)</param>
        /// <param name="key">Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision requirements definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision requirements definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision requirements definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision requirements definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision requirements definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionRequirementsDefinitionsWithoutTenantId">Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>List&lt;DecisionRequirementsDefinitionDto&gt;</returns>
        public List<DecisionRequirementsDefinitionDto> GetDecisionRequirementsDefinitions(string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionRequirementsDefinitionsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.Http.Api.Client.ApiResponse<List<DecisionRequirementsDefinitionDto>> localVarResponse = GetDecisionRequirementsDefinitionsWithHttpInfo(decisionRequirementsDefinitionId, decisionRequirementsDefinitionIdIn, name, nameLike, deploymentId, key, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, tenantIdIn, withoutTenantId, includeDecisionRequirementsDefinitionsWithoutTenantId, sortBy, sortOrder, firstResult, maxResults);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Decision Requirements Definitions Queries for decision requirements definitions that fulfill given parameters. Parameters may be the properties of decision requirements definitions, such as the name, key or version.  The size of the result set can be retrieved by using the [Get Decision Requirements Definition Count](https://docs.camunda.org/manual/latest/reference/rest/decision-requirements-definition/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionRequirementsDefinitionId">Filter by decision requirements definition id. (optional)</param>
        /// <param name="decisionRequirementsDefinitionIdIn">Filter by decision requirements definition ids. (optional)</param>
        /// <param name="name">Filter by decision requirements definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision requirements definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the id of the deployment a decision requirement definition belongs to. (optional)</param>
        /// <param name="key">Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision requirements definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision requirements definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision requirements definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision requirements definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision requirements definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionRequirementsDefinitionsWithoutTenantId">Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <returns>ApiResponse of List&lt;DecisionRequirementsDefinitionDto&gt;</returns>
        public Camunda.Http.Api.Client.ApiResponse<List<DecisionRequirementsDefinitionDto>> GetDecisionRequirementsDefinitionsWithHttpInfo(string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionRequirementsDefinitionsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?))
        {
            Camunda.Http.Api.Client.RequestOptions localVarRequestOptions = new Camunda.Http.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.Http.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.Http.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (decisionRequirementsDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "decisionRequirementsDefinitionId", decisionRequirementsDefinitionId));
            }
            if (decisionRequirementsDefinitionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "decisionRequirementsDefinitionIdIn", decisionRequirementsDefinitionIdIn));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (nameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "nameLike", nameLike));
            }
            if (deploymentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "deploymentId", deploymentId));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (keyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "keyLike", keyLike));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (categoryLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "categoryLike", categoryLike));
            }
            if (version != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "version", version));
            }
            if (latestVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "latestVersion", latestVersion));
            }
            if (resourceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "resourceName", resourceName));
            }
            if (resourceNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "resourceNameLike", resourceNameLike));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeDecisionRequirementsDefinitionsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "includeDecisionRequirementsDefinitionsWithoutTenantId", includeDecisionRequirementsDefinitionsWithoutTenantId));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DecisionRequirementsDefinitionDto>>("/decision-requirements-definition", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionRequirementsDefinitions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Decision Requirements Definitions Queries for decision requirements definitions that fulfill given parameters. Parameters may be the properties of decision requirements definitions, such as the name, key or version.  The size of the result set can be retrieved by using the [Get Decision Requirements Definition Count](https://docs.camunda.org/manual/latest/reference/rest/decision-requirements-definition/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionRequirementsDefinitionId">Filter by decision requirements definition id. (optional)</param>
        /// <param name="decisionRequirementsDefinitionIdIn">Filter by decision requirements definition ids. (optional)</param>
        /// <param name="name">Filter by decision requirements definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision requirements definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the id of the deployment a decision requirement definition belongs to. (optional)</param>
        /// <param name="key">Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision requirements definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision requirements definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision requirements definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision requirements definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision requirements definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionRequirementsDefinitionsWithoutTenantId">Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DecisionRequirementsDefinitionDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<DecisionRequirementsDefinitionDto>> GetDecisionRequirementsDefinitionsAsync(string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionRequirementsDefinitionsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.Http.Api.Client.ApiResponse<List<DecisionRequirementsDefinitionDto>> localVarResponse = await GetDecisionRequirementsDefinitionsWithHttpInfoAsync(decisionRequirementsDefinitionId, decisionRequirementsDefinitionIdIn, name, nameLike, deploymentId, key, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, tenantIdIn, withoutTenantId, includeDecisionRequirementsDefinitionsWithoutTenantId, sortBy, sortOrder, firstResult, maxResults, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Decision Requirements Definitions Queries for decision requirements definitions that fulfill given parameters. Parameters may be the properties of decision requirements definitions, such as the name, key or version.  The size of the result set can be retrieved by using the [Get Decision Requirements Definition Count](https://docs.camunda.org/manual/latest/reference/rest/decision-requirements-definition/get-query-count/) method.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionRequirementsDefinitionId">Filter by decision requirements definition id. (optional)</param>
        /// <param name="decisionRequirementsDefinitionIdIn">Filter by decision requirements definition ids. (optional)</param>
        /// <param name="name">Filter by decision requirements definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision requirements definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the id of the deployment a decision requirement definition belongs to. (optional)</param>
        /// <param name="key">Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision requirements definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision requirements definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision requirements definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision requirements definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision requirements definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionRequirementsDefinitionsWithoutTenantId">Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="sortBy">Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)</param>
        /// <param name="sortOrder">Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)</param>
        /// <param name="firstResult">Pagination of results. Specifies the index of the first result to return. (optional)</param>
        /// <param name="maxResults">Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DecisionRequirementsDefinitionDto&gt;)</returns>
        public async System.Threading.Tasks.Task<Camunda.Http.Api.Client.ApiResponse<List<DecisionRequirementsDefinitionDto>>> GetDecisionRequirementsDefinitionsWithHttpInfoAsync(string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionRequirementsDefinitionsWithoutTenantId = default(bool?), string sortBy = default(string), string sortOrder = default(string), int? firstResult = default(int?), int? maxResults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.Http.Api.Client.RequestOptions localVarRequestOptions = new Camunda.Http.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.Http.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.Http.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (decisionRequirementsDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "decisionRequirementsDefinitionId", decisionRequirementsDefinitionId));
            }
            if (decisionRequirementsDefinitionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "decisionRequirementsDefinitionIdIn", decisionRequirementsDefinitionIdIn));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (nameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "nameLike", nameLike));
            }
            if (deploymentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "deploymentId", deploymentId));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (keyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "keyLike", keyLike));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (categoryLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "categoryLike", categoryLike));
            }
            if (version != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "version", version));
            }
            if (latestVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "latestVersion", latestVersion));
            }
            if (resourceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "resourceName", resourceName));
            }
            if (resourceNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "resourceNameLike", resourceNameLike));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeDecisionRequirementsDefinitionsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "includeDecisionRequirementsDefinitionsWithoutTenantId", includeDecisionRequirementsDefinitionsWithoutTenantId));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "sortBy", sortBy));
            }
            if (sortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "sortOrder", sortOrder));
            }
            if (firstResult != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "firstResult", firstResult));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DecisionRequirementsDefinitionDto>>("/decision-requirements-definition", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionRequirementsDefinitions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Decision Requirements Definition Count Requests the number of decision requirements definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Requirements Definitions](https://docs.camunda.org/manual/latest/reference/rest/decision-requirements-definition/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionRequirementsDefinitionId">Filter by decision requirements definition id. (optional)</param>
        /// <param name="decisionRequirementsDefinitionIdIn">Filter by decision requirements definition ids. (optional)</param>
        /// <param name="name">Filter by decision requirements definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision requirements definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the id of the deployment a decision requirement definition belongs to. (optional)</param>
        /// <param name="key">Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision requirements definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision requirements definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision requirements definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision requirements definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision requirements definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionRequirementsDefinitionsWithoutTenantId">Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>CountResultDto</returns>
        public CountResultDto GetDecisionRequirementsDefinitionsCount(string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionRequirementsDefinitionsWithoutTenantId = default(bool?))
        {
            Camunda.Http.Api.Client.ApiResponse<CountResultDto> localVarResponse = GetDecisionRequirementsDefinitionsCountWithHttpInfo(decisionRequirementsDefinitionId, decisionRequirementsDefinitionIdIn, name, nameLike, deploymentId, key, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, tenantIdIn, withoutTenantId, includeDecisionRequirementsDefinitionsWithoutTenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Decision Requirements Definition Count Requests the number of decision requirements definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Requirements Definitions](https://docs.camunda.org/manual/latest/reference/rest/decision-requirements-definition/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionRequirementsDefinitionId">Filter by decision requirements definition id. (optional)</param>
        /// <param name="decisionRequirementsDefinitionIdIn">Filter by decision requirements definition ids. (optional)</param>
        /// <param name="name">Filter by decision requirements definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision requirements definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the id of the deployment a decision requirement definition belongs to. (optional)</param>
        /// <param name="key">Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision requirements definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision requirements definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision requirements definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision requirements definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision requirements definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionRequirementsDefinitionsWithoutTenantId">Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <returns>ApiResponse of CountResultDto</returns>
        public Camunda.Http.Api.Client.ApiResponse<CountResultDto> GetDecisionRequirementsDefinitionsCountWithHttpInfo(string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionRequirementsDefinitionsWithoutTenantId = default(bool?))
        {
            Camunda.Http.Api.Client.RequestOptions localVarRequestOptions = new Camunda.Http.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Camunda.Http.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.Http.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (decisionRequirementsDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "decisionRequirementsDefinitionId", decisionRequirementsDefinitionId));
            }
            if (decisionRequirementsDefinitionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "decisionRequirementsDefinitionIdIn", decisionRequirementsDefinitionIdIn));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (nameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "nameLike", nameLike));
            }
            if (deploymentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "deploymentId", deploymentId));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (keyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "keyLike", keyLike));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (categoryLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "categoryLike", categoryLike));
            }
            if (version != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "version", version));
            }
            if (latestVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "latestVersion", latestVersion));
            }
            if (resourceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "resourceName", resourceName));
            }
            if (resourceNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "resourceNameLike", resourceNameLike));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeDecisionRequirementsDefinitionsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "includeDecisionRequirementsDefinitionsWithoutTenantId", includeDecisionRequirementsDefinitionsWithoutTenantId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<CountResultDto>("/decision-requirements-definition/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionRequirementsDefinitionsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Decision Requirements Definition Count Requests the number of decision requirements definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Requirements Definitions](https://docs.camunda.org/manual/latest/reference/rest/decision-requirements-definition/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionRequirementsDefinitionId">Filter by decision requirements definition id. (optional)</param>
        /// <param name="decisionRequirementsDefinitionIdIn">Filter by decision requirements definition ids. (optional)</param>
        /// <param name="name">Filter by decision requirements definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision requirements definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the id of the deployment a decision requirement definition belongs to. (optional)</param>
        /// <param name="key">Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision requirements definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision requirements definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision requirements definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision requirements definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision requirements definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionRequirementsDefinitionsWithoutTenantId">Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CountResultDto</returns>
        public async System.Threading.Tasks.Task<CountResultDto> GetDecisionRequirementsDefinitionsCountAsync(string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionRequirementsDefinitionsWithoutTenantId = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Camunda.Http.Api.Client.ApiResponse<CountResultDto> localVarResponse = await GetDecisionRequirementsDefinitionsCountWithHttpInfoAsync(decisionRequirementsDefinitionId, decisionRequirementsDefinitionIdIn, name, nameLike, deploymentId, key, keyLike, category, categoryLike, version, latestVersion, resourceName, resourceNameLike, tenantIdIn, withoutTenantId, includeDecisionRequirementsDefinitionsWithoutTenantId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Decision Requirements Definition Count Requests the number of decision requirements definitions that fulfill the query criteria. Takes the same filtering parameters as the [Get Decision Requirements Definitions](https://docs.camunda.org/manual/latest/reference/rest/decision-requirements-definition/get-query/) method.
        /// </summary>
        /// <exception cref="Camunda.Http.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="decisionRequirementsDefinitionId">Filter by decision requirements definition id. (optional)</param>
        /// <param name="decisionRequirementsDefinitionIdIn">Filter by decision requirements definition ids. (optional)</param>
        /// <param name="name">Filter by decision requirements definition name. (optional)</param>
        /// <param name="nameLike">Filter by decision requirements definition names that the parameter is a substring of. (optional)</param>
        /// <param name="deploymentId">Filter by the id of the deployment a decision requirement definition belongs to. (optional)</param>
        /// <param name="key">Filter by decision requirements definition key, i.e., the id in the DMN 1.3 XML. Exact match. (optional)</param>
        /// <param name="keyLike">Filter by decision requirements definition keys that the parameter is a substring of. (optional)</param>
        /// <param name="category">Filter by decision requirements definition category. Exact match. (optional)</param>
        /// <param name="categoryLike">Filter by decision requirements definition categories that the parameter is a substring of. (optional)</param>
        /// <param name="version">Filter by decision requirements definition version. (optional)</param>
        /// <param name="latestVersion">Only include those decision requirements definitions that are latest versions. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="resourceName">Filter by the name of the decision requirements definition resource. Exact match. (optional)</param>
        /// <param name="resourceNameLike">Filter by names of those decision requirements definition resources that the parameter is a substring of. (optional)</param>
        /// <param name="tenantIdIn">Filter by a comma-separated list of tenant ids. A decision requirements definition must have one of the given tenant ids. (optional)</param>
        /// <param name="withoutTenantId">Only include decision requirements definitions which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="includeDecisionRequirementsDefinitionsWithoutTenantId">Include decision requirements definitions which belong to no tenant. Can be used in combination with &#x60;tenantIdIn&#x60;. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CountResultDto)</returns>
        public async System.Threading.Tasks.Task<Camunda.Http.Api.Client.ApiResponse<CountResultDto>> GetDecisionRequirementsDefinitionsCountWithHttpInfoAsync(string decisionRequirementsDefinitionId = default(string), string decisionRequirementsDefinitionIdIn = default(string), string name = default(string), string nameLike = default(string), string deploymentId = default(string), string key = default(string), string keyLike = default(string), string category = default(string), string categoryLike = default(string), int? version = default(int?), bool? latestVersion = default(bool?), string resourceName = default(string), string resourceNameLike = default(string), string tenantIdIn = default(string), bool? withoutTenantId = default(bool?), bool? includeDecisionRequirementsDefinitionsWithoutTenantId = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Camunda.Http.Api.Client.RequestOptions localVarRequestOptions = new Camunda.Http.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Camunda.Http.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Camunda.Http.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (decisionRequirementsDefinitionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "decisionRequirementsDefinitionId", decisionRequirementsDefinitionId));
            }
            if (decisionRequirementsDefinitionIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "decisionRequirementsDefinitionIdIn", decisionRequirementsDefinitionIdIn));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (nameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "nameLike", nameLike));
            }
            if (deploymentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "deploymentId", deploymentId));
            }
            if (key != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "key", key));
            }
            if (keyLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "keyLike", keyLike));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (categoryLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "categoryLike", categoryLike));
            }
            if (version != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "version", version));
            }
            if (latestVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "latestVersion", latestVersion));
            }
            if (resourceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "resourceName", resourceName));
            }
            if (resourceNameLike != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "resourceNameLike", resourceNameLike));
            }
            if (tenantIdIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "tenantIdIn", tenantIdIn));
            }
            if (withoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "withoutTenantId", withoutTenantId));
            }
            if (includeDecisionRequirementsDefinitionsWithoutTenantId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Camunda.Http.Api.Client.ClientUtils.ParameterToMultiMap("", "includeDecisionRequirementsDefinitionsWithoutTenantId", includeDecisionRequirementsDefinitionsWithoutTenantId));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CountResultDto>("/decision-requirements-definition/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecisionRequirementsDefinitionsCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
